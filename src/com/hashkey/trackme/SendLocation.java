package com.hashkey.trackme;

import android.app.Service;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.telephony.SmsManager;
import android.util.Log;
import android.widget.Toast;

import com.parse.Parse;
import com.parse.ParseUser;

public class SendLocation extends Service implements LocationListener{
	
	private LocationManager locationManager;
	boolean canGetLocation = false;
	Location location;
	public static ParseUser currentUser = null;
	private String phoneNo = null; 
	
    @Override
    public void onCreate() {
    	Log.d("MINE","Send Location Service OnCreate");
    	if(DispatchActivity.currentUser == null){// making sure that if the app is not open, initialise the parse store
    		Log.d("MINE","currentUser is Null");
    		Parse.enableLocalDatastore(this);
    		Parse.initialize(this, "TrRahQfX0V4ohVGjSsVWcXwtExQnmofyHnLDAPUm", "LO65dGPtVDZzmRNa87udTW8vL0XIU54SR6uZahlw");
    	}
    	currentUser = ParseUser.getCurrentUser();
    }
    
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
//    	Log.d("MINE","Service OnStart");
    	// meaning that an activity has called the service
		phoneNo = intent.getStringExtra("phoneNumber"); //if put, get the number to send
		if(phoneNo==null) {
			Log.d("MINE","No phone supplied!"); // if not put, or failed to send
		}else{
			Log.d("MINE","Phone: "+phoneNo); //show the number
			doIt();
		}
    	return START_REDELIVER_INTENT;
    }
    
    @Override
    public void onDestroy(){
    	super.onDestroy();
    }
    
    
    private void doIt(){
    	Log.d("MINE","gettinLoc");
    	location = getLocation();
		if (location == null){
			return;
		}
		Log.d("MINE","gotLoc");
		Double lat = Double.valueOf(location.getLatitude());
		Double lng = Double.valueOf(location.getLongitude());
	
		String message = new String("#TrackMe#\nLOCATION:\n"+lat.toString()+", "+lng.toString()+"\nThis message was auto-generated by 'TrackMe'");
		try {
			SmsManager smsManager = SmsManager.getDefault();
			smsManager.sendTextMessage(phoneNo, null, message, null, null);
			Log.d("MINE","Sent SMS");
		} catch (Exception e) {
			e.printStackTrace();
		}
		stopSelf();
    }
    
    public Location getLocation() {
		int MIN_TIME_BW_UPDATES = 2000;
		int MIN_DISTANCE_CHANGE_FOR_UPDATES = 0;
		
		
	    try {
	        locationManager = (LocationManager) this
	                .getSystemService(LOCATION_SERVICE);

	        // getting GPS status
	        boolean isGPSEnabled = locationManager
	                .isProviderEnabled(LocationManager.GPS_PROVIDER);

	        // getting network status
	        boolean isNetworkEnabled = locationManager
	                .isProviderEnabled(LocationManager.NETWORK_PROVIDER);

	        
	        if (!isGPSEnabled && !isNetworkEnabled) {
	            // no network provider is enabled
	        } else {
	            this.canGetLocation = true;
	            if (isNetworkEnabled) {
	                locationManager.requestLocationUpdates(
	                        LocationManager.NETWORK_PROVIDER,
	                        MIN_TIME_BW_UPDATES,
	                        MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
	                Log.d("Network", "Network Enabled");
	                if (locationManager != null) {
	                    location = locationManager
	                            .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
	                }
	            }
	            // if GPS Enabled get lat/long using GPS Services
	            if (isGPSEnabled) {
	                if (location == null) {
	                    locationManager.requestLocationUpdates(
	                            LocationManager.GPS_PROVIDER,
	                            MIN_TIME_BW_UPDATES,
	                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
	                    Log.d("GPS", "GPS Enabled");
	                    if (locationManager != null) {
	                        location = locationManager
	                                .getLastKnownLocation(LocationManager.GPS_PROVIDER);
	                    }
	                }
	            }
	        }

	    } catch (Exception e) {
	        e.printStackTrace();
	    }

	    return location;
	}
    
    
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void onLocationChanged(Location arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub
		
	}
}
